
name: Build and Deploy
run-name: Workflow run for ${{ github.ref }}
on:
  push:
      branches:
        - "*"
  workflow_dispatch:
    inputs:
      aws-deploy:
        type: boolean
        required: true
        default: true
jobs:
  verify-tags:
    runs-on: ubuntu-latest
    outputs:
      ALLOWED_TAG: ${{ steps.tag-checker.outputs.TRIGGER_ALLOWED }}
    steps:
      - name: Check if tag is one in list of current releases
        id: tag-checker
        run: |
          (echo -n TRIGGER_ALLOWED= && echo 'print("${{ github.ref_name }}".split("_")[0] not in "${{ vars.CURRENT_RELEASE }}")' | python3) >> "$GITHUB_OUTPUT"
  # api-service:
  #   needs: verify-tags
  #   if: needs.verify-tags.outputs.ALLOWED_TAG ==  'True'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Login to docker hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build docker image and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         file: ./api-service/Dockerfile  
  #         push: true
  #         tags: ${{ vars.DOCKERHUB_USERNAME }}/obsrv-api-service:${{ github.ref_name }}
  # command-service:
  #   needs: verify-tags
  #   if: needs.verify-tags.outputs.ALLOWED_TAG ==  'True'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Login to docker hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ vars.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build docker image and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         file: ./command-service/Dockerfile  
  #         push: true
  #         tags: ${{ vars.DOCKERHUB_USERNAME }}/flink-command-service:${{ github.ref_name }}

  aws-deploy:
    # needs: [ verify-tags,api-service, command-service]
    # if: needs.verify-tags.outputs.ALLOWED_TAG ==  'True'
    runs-on: ubuntu-latest
    environment: aws-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v1.1.0
        with:
          terragrunt_version: v0.45.8
      - name: Terragrunt installation
        run: terragrunt --version
      - name: Clone the terraform deployment repo
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.DEPLOY_REPO }}
          path: deploy
          # ref: ${{ vars.DEPLOY_REPO_REF }}
          ref: develop

      - name: Fetch and update kubeconfig file
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_REGION: us-east-2
        run: |
          aws eks --region us-east-2 update-kubeconfig --name obsrv-ga-dev-dev-eks
          

      - name: Run terraform init and apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_REGION: us-east-2
          # AWS_TERRAFORM_BACKEND_BUCKET_NAME: ${{ vars.AWS_TERRAFORM_BACKEND_BUCKET_NAME }}
          # AWS_TERRAFORM_BACKEND_BUCKET_REGION: ${{ vars.AWS_TERRAFORM_BACKEND_BUCKET_REGION }}
          AWS_TERRAFORM_BACKEND_BUCKET_NAME: obsrv-ga-dev-tfstate
          AWS_TERRAFORM_BACKEND_BUCKET_REGION: us-east-2
          KUBE_CONFIG_PATH: ~/.kube/config
          
        run: |
          cd deploy/terraform/aws
          terragrunt init
          terragrunt apply -var-file=vars/dev.tfvars -auto-approve --target=module.dataset_api \
          -var dataset_api_container_registry=${{ vars.DOCKERHUB_USERNAME }} \
          -var dataset_api_image_tag=develop-241-4 \
          -var env=dev \
          -var building_block=obsrv-ga-dev \
          -var region=us-east-2 \
          -var availability_zone=["us-east-2a","us-east-2b","us-east-2c"] \
          -var timezone=UTC \ 
          -var create_vpc=true -var create_velero_user=true -var create_kong_ingress=true \
          -var cluster_logs_enabled=true

  azure-deploy:
    # needs: [verify-tags, api-service, command-service]
    if: needs.verify-tags.outputs.ALLOWED_TAG ==  'True' && vars.CLOUD_PROVIDER == 'azure'
    runs-on: ubuntu-latest
    steps:
      - name: Clone the terraform deployment repo
        uses: actions/checkout@v3
        with:
          repository: ${{ vars.DEPLOY_REPO }}
          path: deploy
          ref: ${{ vars.DEPLOY_REPO_REF }}

      - name: Run terraform init and apply
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        run: |
          cd deploy/terraform/azure
          terragrunt init
          terragrunt apply -auto-approve --target=module.dataset_api \
          -var dataset_api_container_registry=${{ secrets.DOCKERHUB_USERNAME }} \
          -var dataset_api_image_tag=${{ github.ref_name }}
