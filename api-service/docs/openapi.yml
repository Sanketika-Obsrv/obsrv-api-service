openapi: 3.0.0
info:
  title: Obsrv API Service
  description: >-
    Obsrv is a set of APIs that provide access to a variety of data sources and
    datasets. These APIs can be used to analyze different types of events, as
    well as to manage data sources and datasets.
  version: 1.0.0
servers:
  - url: "<Your-Host-IP>:3000"
tags:
  - name: Dataset CRUD APIs
    description: >-
      The Dataset APIs facilitate efficient management of datasets by enabling
      users to create, read, and update dataset records, along with the
      capability to list multiple records based on specific criteria.
  - name: Data Ingest
  - name: Data query
paths:
  /v1/datasets/create:
    post:
      tags:
        - Dataset CRUD APIs
      summary: Dataset create
      description: >-
        This API allows you to create new datasets used by the analytical data
        source.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                dataset_id: sb-telemetry
                type: dataset
                name: sb-telemetry
                validation_config:
                  validate: true
                  mode: Strict
                extraction_config:
                  is_batch_event: true
                  extraction_key: events
                  dedup_config:
                    drop_duplicates: true
                    dedup_key: id
                dedup_config:
                  drop_duplicates: true
                  dedup_key: mid
                data_schema:
                  $schema: https://json-schema.org/draft/2020-12/schema
                  type: object
                  properties:
                    eid:
                      type: string
                    ver:
                      type: string
                    required:
                      - eid
                  additionalProperties: true
                denorm_config:
                  denorm_fields:
                    - denorm_key: actor.id
                      denorm_out_field: userdata
                    - denorm_key: actor.id
                      denorm_out_field: mid
                dataset_config:
                  data_key: mid
                  timestamp_key: ets
                tags:
                  - tag1
                  - tag2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Dataset Success
                  value:
                    id: api.datasets.create
                    ver: v1
                    ts: 1711523413816
                    params:
                      status: SUCCESS
                      errmsg: ''
                    responseCode: OK
                    result:
                      id: sb-telemetry.1
                example-1:
                  summary: Master Dataset Success
                  value:
                    id: api.datasets.create
                    ver: v1
                    ts: 1711523649865
                    params:
                      status: SUCCESS
                      errmsg: ''
                    responseCode: OK
                    result:
                      id: sb-telemetry.1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 'Failure: Dataset contains duplicate denorm out field'
                  value:
                    id: api.datasets.create
                    ver: v1
                    ts: 1711523869002
                    params:
                      status: FAILED
                      errmsg: Duplicate denorm output fields found
                    responseCode: BAD_REQUEST
                    result: {}
                example-1:
                  summary: 'Failure: Invalid request payload provided'
                  value:
                    id: api.datasets.create
                    ver: v1
                    ts: 1711523935549
                    params:
                      status: FAILED
                      errmsg: '#required should have required property ''dataset_id'''
                    responseCode: BAD_REQUEST
                    result: {}
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
              example:
                id: api.datasets.create
                ver: v1
                ts: 1711523707699
                params:
                  status: FAILED
                  errmsg: Dataset already exists
                responseCode: CONFLICT
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                id: api.datasets.create
                ver: v1
                ts: 1712033980278
                params:
                  status: FAILED
                  errmsg: Failed to create dataset
                responseCode: INTERNAL_SERVER_ERROR
                result: {}
  /v1/datasets/update:
    patch:
      tags:
        - Dataset CRUD APIs
      summary: Dataset update
      description: >-
        This API allows you to update existing datasets, add or remove denorm
        fields used by the analytical data source. User can even add, remove or update transformations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                dataset_id: sb-telemetry.1
                name: sb-telemetry
                validation_config:
                  validate: true
                  mode: Strict
                extraction_config:
                  is_batch_event: true
                  extraction_key: events
                  dedup_config:
                    drop_duplicates: true
                    dedup_key: id
                dedup_config:
                  drop_duplicates: true
                  dedup_key: mid
                data_schema:
                  $schema: https://json-schema.org/draft/2020-12/schema
                  type: object
                  properties:
                    eid:
                      type: string
                    ver:
                      type: string
                    required:
                      - eid
                  additionalProperties: true
                denorm_config:
                  denorm_fields:
                    - values:
                        denorm_key: actor.id
                        denorm_out_field: userdata
                      action: remove
                    - values:
                        denorm_key: actor.id
                        denorm_out_field: edata
                      action: add
                transformation_config:
                  - values:
                      field_key: eid
                      transformation_function:
                        type: mask
                        expr: eid
                        condition: null
                      mode: Strict
                      metadata:
                        _transformationType: mask
                        _transformedFieldDataType: string
                        _transformedFieldSchemaType: string
                        section: transformation
                    action: add
                dataset_config:
                  data_key: mid
                  timestamp_key: ets
                tags:
                  - values:
                      - tag1
                      - tag2
                    action: remove
                  - values:
                      - tag3
                      - tag4
                    action: add
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                id: api.datasets.update
                ver: v1
                ts: 1711524639749
                params:
                  status: SUCCESS
                  errmsg: ''
                responseCode: OK
                result:
                  message: Dataset is updated successfully
                  id: sb-telemetry.1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 'Failure: Invalid payload provided'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534119759
                    params:
                      status: FAILED
                      errmsg: '#properties/name/type should be string'
                    responseCode: BAD_REQUEST
                    result: {}
                example-1:
                  summary: 'Failure: No field provided along with dataset_id'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534170807
                    params:
                      status: FAILED
                      errmsg: >-
                        Provide atleast one field in addition to the dataset_id
                        to update the dataset
                    responseCode: BAD_REQUEST
                    result: {}
                example-2:
                  summary: 'Failure: Cannot update as dataset not in draft state'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534328930
                    params:
                      status: FAILED
                      errmsg: Dataset cannot be updated as it is not in draft state
                    responseCode: BAD_REQUEST
                    result: {}
                example-3:
                  summary: 'Failure:  Dataset contains duplicate denorm out field'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534439560
                    params:
                      status: FAILED
                      errmsg: Dataset contains duplicate denorm out keys:[userdata}]
                    responseCode: BAD_REQUEST
                    result: {}
                example-4:
                  summary: 'Failure: Dataset tags to add already exists'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534567778
                    params:
                      status: FAILED
                      errmsg: Dataset tags already exist
                    responseCode: BAD_REQUEST
                    result: {}
                example-5:
                  summary: 'Failure: Dataset transformations to add already exists'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534711145
                    params:
                      status: FAILED
                      errmsg: Dataset transformations already exists
                    responseCode: BAD_REQUEST
                    result: {}
                example-6:
                  summary: 'Failure: Dataset denorm fields to add already exists'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534915269
                    params:
                      status: FAILED
                      errmsg: Denorm fields already exist
                    responseCode: BAD_REQUEST
                    result: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: 'Failure: Dataset does not exists to update'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711524320479
                    params:
                      status: FAILED
                      errmsg: Dataset does not exists to update
                    responseCode: NOT_FOUND
                    result: {}
                example-1:
                  summary: 'Failure: Dataset tags to remove do not exist'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534640665
                    params:
                      status: FAILED
                      errmsg: Dataset tags do not exist to remove
                    responseCode: NOT_FOUND
                    result: {}
                example-2:
                  summary: 'Failure: Dataset transformations to update do not exists'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534770124
                    params:
                      status: FAILED
                      errmsg: Dataset transformations do not exist to update
                    responseCode: NOT_FOUND
                    result: {}
                example-3:
                  summary: 'Failure: Dataset transformations to remove do not exist'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534808604
                    params:
                      status: FAILED
                      errmsg: Dataset transformations do not exist to remove
                    responseCode: NOT_FOUND
                    result: {}
                example-4:
                  summary: 'Failure: Dataset denorm to remove does not exist'
                  value:
                    id: api.datasets.update
                    ver: v1
                    ts: 1711534975927
                    params:
                      status: FAILED
                      errmsg: Denorm fields do not exist to remove
                    responseCode: NOT_FOUND
                    result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                id: api.datasets.update
                ver: v1
                ts: 1712034102445
                params:
                  status: FAILED
                  errmsg: Failed to update dataset
                responseCode: INTERNAL_SERVER_ERROR
                result: {}
  /v1/datasets/read/{dataset_id}:
    get:
      tags:
        - Dataset CRUD APIs
      summary: Dataset read
      description: >-
        This API allows you to read dataset from the requested dataset_id.
        User can request for the specific fields and status of the dataset through the request params.
        By default, the API returns the dataset of status "Live".
        <br>
        <br>
        Valid fields that user can request are "dataset_id,id,name,type,validation_config,extraction_config,dedup_config,data_schema,router_config,denorm_config,transformation_config,dataset_config,tags,status,version,created_by,updated_by,created_date,updated_date,published_date"
      parameters:
        - name: dataset_id
          example: sb_telemetry.1
          in: path
          required: true
          schema:
            type: string
        - name: status
          example: Draft
          in: query
          required: false 
          schema:
            type: string
        - name: fields
          example: name
          in: query
          required: false 
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-0:
                  summary: Read Draft dataset
                  value:
                    id: api.datasets.read
                    ver: v1
                    ts: 1712060468710
                    params:
                      status: SUCCESS
                      errmsg: ''
                    responseCode: OK
                    result:
                      id: sb-telemetry.1
                      dataset_id: sb-telemetry
                      version: 1
                      type: dataset
                      name: sb-telemetry
                      validation_config:
                        validate: true
                        mode: Strict
                      extraction_config:
                        is_batch_event: true
                        extraction_key: events
                        dedup_config:
                          drop_duplicates: true
                          dedup_key: id
                          dedup_period: 604800
                      dedup_config:
                        drop_duplicates: true
                        dedup_key: mid
                        dedup_period: 604800
                      data_schema:
                        $schema: https://json-schema.org/draft/2020-12/schema
                        type: object
                        properties:
                          eid:
                            type: string
                          ver:
                            type: string
                          required:
                            - eid
                        additionalProperties: true
                      denorm_config:
                        redis_db_host: localhost
                        redis_db_port: 6379
                        denorm_fields:
                          - denorm_key: actor.id
                            denorm_out_field: userdata
                          - denorm_key: actor.id
                            denorm_out_field: mid
                      router_config:
                        topic: ''
                      dataset_config:
                        data_key: mid
                        timestamp_key: ets
                        entry_topic: local.ingest
                        redis_db_host: localhost
                        redis_db_port: 6379
                        index_data: true
                        redis_db: 0
                      client_state: {}
                      tags:
                        - tag1
                        - tag2
                      status: Draft
                      created_by: SYSTEM
                      updated_by: SYSTEM
                      created_date: '2024-04-01T23:33:29.770Z'
                      updated_date: '2024-04-01T23:33:29.770Z'
                      published_date: null
                example-1:
                  summary: Read Live dataset
                  value:
                    id: api.datasets.read
                    ver: v1
                    ts: 1712060439843
                    params:
                      status: SUCCESS
                      errmsg: ''
                    responseCode: OK
                    result:
                      id: sb-telemetry.1
                      dataset_id: sb-telemetry
                      type: datasets
                      name: new
                      validation_config: {}
                      extraction_config: {}
                      dedup_config: {}
                      data_schema: {}
                      denorm_config: {}
                      router_config: {}
                      dataset_config: {}
                      tags: []
                      status: Live
                      created_by: System
                      updated_by: System
                      created_date: '2024-04-01T23:33:29.770Z'
                      updated_date: '2024-04-01T23:33:29.770Z'
                      published_date: '2024-04-01T23:33:29.770Z'
                      version: 1
                example-2:
                  summary: Read specific fields from the dataset
                  value:
                    id: api.datasets.read
                    ver: v1
                    ts: 1712060598298
                    params:
                      status: SUCCESS
                      errmsg: ''
                    responseCode: OK
                    result:
                      name: sb-telemetry
                      type: dataset
                      id: sb-telemetry.1
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
              example:
                id: api.datasets.read
                ver: v1
                ts: 1712060663861
                params:
                  status: FAILED
                  errmsg: >-
                    The specified field [newname] in the dataset cannot be
                    found.
                responseCode: BAD_REQUEST
                result: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
              example:
                id: api.datasets.read
                ver: v1
                ts: 1712060707857
                params:
                  status: FAILED
                  errmsg: Dataset with the given dataset_id not found
                responseCode: NOT_FOUND
                result: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
              example:
                id: api.datasets.read
                ver: v1
                ts: 1712556501601
                params:
                  status: FAILED
                  errmsg: Failed to read dataset
                responseCode: INTERNAL_SERVER_ERROR
                result: {}
  /v1/data/in/{datasetId}:
      post:
        tags:
          - Data Ingest
        parameters:
        - required: true
          schema:
            title: datasetId
            type: string
          name: datasetId
          in: path
        summary: Data ingest
        description: >-
          This API allows you to ingest events to a data streaming platform in individual or batch format.
        requestBody:
          content:
            application/json:
              examples:
                example1:
                    summary: Ingest individual event
                    value:
                      data:
                        event:
                          eid: INTERACT
                          date: '2022-01-01'
                          ver: '3.0'
                          syncts: 1668591949682
                          ets: 1668591949682
                example2:
                    summary: Ingest batch event
                    value:
                      data:
                        eid: "eid"
                        events: [{ "eid": "INTERACT","date": "2022-01-01","ver": "3.0","syncts": 1668591949682}]
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                examples:
                  example-0:
                    summary: Data ingest successful(individual)
                    value:
                      id: api.data.in
                      ver: v1
                      ts: 1711966306164
                      params:
                        status: SUCCESS
                        errmsg: ''
                      responseCode: OK
                      result:
                        message: Data ingested successfully
                  example-1:
                    summary: Data ingest successfully(batch)
                    value:
                      id: api.data.in
                      ver: v1
                      ts: 1711966352987
                      params:
                        status: SUCCESS
                        errmsg: ''
                      responseCode: OK
                      result:
                        message: Data ingested successfully
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                example:
                  id: api.data.in
                  ver: v1
                  ts: 1711966410766
                  params:
                    status: FAILED
                    errmsg: >-
                      #properties/data/oneOf should match exactly one schema in
                      oneOf
                  responseCode: BAD_REQUEST
                  result: {}
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                examples:
                  example-0:
                    summary: Dataset not found
                    value:
                      id: api.data.in
                      ver: v1
                      ts: 1711966446364
                      params:
                        status: FAILED
                        errmsg: Dataset with id not found
                      responseCode: BAD_REQUEST
                      result: {}
                  example-1:
                    summary: Entry topic not found
                    value:
                      id: api.data.in
                      ver: v1
                      ts: 1711975482739
                      params:
                        status: FAILED
                        errmsg: Entry topic is not defined
                      responseCode: BAD_REQUEST
                      result: {}
  /v1/data/query:
      post:
        tags:
          - Data query
        summary: Data query
        description: >-
          This API allows you to query your datasource.
        requestBody:
          content:
            application/json:
                # example:
                #   context:
                #     granularity: day
                #   query: >-
                #     SELECT * FROM "rollups-configured" WHERE __time >= TIMESTAMP
                #     '2020-12-31' AND __time < TIMESTAMP '2024-01-21' LIMIT 1
              examples:
                example1:
                    summary: SQL query
                    value:
                      context:
                        granularity: day
                      query: >-
                        SELECT * FROM "rollups-configured" WHERE __time >= TIMESTAMP
                        '2020-12-31' AND __time < TIMESTAMP '2024-01-21' LIMIT 1
                example2:
                    summary: Native query
                    value:
                      context:
                        granularity: day
                      query:
                        quertType: scan
                        dataSource: rollups-configured
                        intervals:
                          type: intervals
                          intervals: ["2022-01-01/2022-02-01"]
                        granularity: day
                        columns: ["eid","__time"]
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                examples:
                  example-0:
                    summary: 'Success: sql query'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711971972855
                      params:
                        status: SUCCESS
                        errmsg: ''
                      responseCode: OK
                      result:
                        - __time: '2022-01-01T00:00:00.000Z'
                          eid: '1'
                          ver: '3.0'
                          flags_ex_processed: 'true'
                          flags_pp_validation_processed: 'true'
                          flags_pp_duplicate_skipped: 'true'
                          flags_device_denorm: 'true'
                          flags_user_denorm: 'true'
                          flags_loc_denorm: 'true'
                          derivedlocationdata_district: AGRA
                          derivedlocationdata_from: user-profile
                          derivedlocationdata_state: Uttar Pradesh
                          mid: 6c3fc8c2-357d-489b-b0c9-afdde6e5c6c0
                          type: events
                          actor_type: User
                          actor_id: 311663b2-d7de-4d46-8803-20407eaa3403
                          edata_type: session
                          userdata_subject: null
                          userdata_district: AGRA
                          userdata_usersubtype: hm
                          userdata_grade: null
                          userdata_usersignintype: Self-Signed-In
                          userdata_usertype: administrator
                          userdata_userlogintype: administrator
                          userdata_state: Uttar Pradesh
                          devicedata_statecustomcode: '29'
                          devicedata_country: India
                          devicedata_iso3166statecode: IN-KA
                          devicedata_city: Bengaluru
                          devicedata_countrycode: IN
                          devicedata_state: Karnataka
                          devicedata_devicespec_idisk: '106.47'
                          devicedata_devicespec_webview: 107.0.5304.105
                          devicedata_devicespec_os: Android 12
                          devicedata_devicespec_scrn: '6.53'
                          devicedata_devicespec_sims: '-1'
                          devicedata_devicespec_cpu: "abi: arm64-v8a processor\t: 0 "
                          devicedata_devicespec_id: ac4ad4ac3feda0f2b17835b81e736c88c194dc89
                          devicedata_devicespec_camera: ''
                          devicedata_devicespec_edisk: '106.27'
                          devicedata_devicespec_make: vivo 1915
                          devicedata_statecode: KA
                          devicedata_districtcustom: BENGALURU URBAN SOUTH
                          devicedata_statecustomname: Karnataka
                          devicedata_userdeclared_district: AGRA
                          devicedata_userdeclared_state: Uttar Pradesh
                          context_cdata_id: a3c784f0-61d8-43e4-a92a-373fd4338c1d
                          context_cdata_type: UserSession
                          context_env: sdk
                          context_channel: '0126796199493140480'
                          context_pdata_id: preprod.diksha.app
                          context_pdata_pid: sunbird.app
                          context_pdata_ver: 4.10.1023preproduction
                          context_sid: a3c784f0-61d8-43e4-a92a-373fd4338c1d
                          context_did: ac4ad4ac3feda0f2b17835b81e736c88c194dc89
                          context_rollup_l1: '0126796199493140480'
                          object_id: ''
                          object_type: ''
                          object_version: ''
                          object_rollup: '{}'
                          count: 3
                          edata_duration_sum: null
                  example-1:
                    summary: 'Success: native query'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711973520793
                      params:
                        status: SUCCESS
                        errmsg: ''
                      responseCode: OK
                      result:
                        - timestamp: '2022-01-01T00:00:00.000Z'
                          result:
                            mid: 1
          '400':
            description: Bad Request
            content:
              application/json:
                schema:
                  type: object
                examples:
                  example-0:
                    summary: 'Failure: invalid date range'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711972193426
                      params:
                        status: FAILED
                        errmsg: >-
                          Invalid date range! make sure your range cannot be more
                          than 30 days
                      responseCode: BAD_REQUEST
                      result: {}
                  example-1:
                    summary: 'Failure: Invalid date range (native)'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711972501847
                      params:
                        status: FAILED
                        errmsg: >-
                          Invalid date range! make sure your range cannot be more
                          than 30 days
                      responseCode: BAD_REQUEST
                      result: {}
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  type: object
                examples:
                  example-0:
                    summary: 'Failure: Datasource not found in druid'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711972085550
                      params:
                        status: FAILED
                        errmsg: >-
                          Datasource rollups-configured.1_rollup_week not
                          available for querying
                      responseCode: NOT_FOUND
                      result: {}
                  example-1:
                    summary: 'Failure: Datasource not found in live table'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711975034302
                      params:
                        status: FAILED
                        errmsg: Datasource undefined not found
                      responseCode: NOT_FOUND
                      result: {}
                  example-2:
                    summary: 'Failure: Datasource not found in live table (native)'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711974978635
                      params:
                        status: FAILED
                        errmsg: Datasource telemetry-eventssss not found
                      responseCode: NOT_FOUND
                      result: {}
                  example-3:
                    summary: 'Failure: Datasource not found in druid(native)'
                    value:
                      id: api.data.out
                      ver: v1
                      ts: 1711972569115
                      params:
                        status: FAILED
                        errmsg: >-
                          Datasource telemetry-events.1_rollup_day not available
                          for querying
                      responseCode: NOT_FOUND
                      result: {}
